type: edu
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n\
    \        \n    //Stage1\n        // System.out.println(\"Starting to make a coffee\"\
    );\n        // System.out.println(\"Grinding coffee beans\");\n        // System.out.println(\"\
    Boiling water\");\n        // System.out.println(\"Mixing boiled water with crushed\
    \ coffee beans\");\n        // System.out.println(\"Pouring coffee into the cup\"\
    );\n        // System.out.println(\"Pouring some milk into the cup\");\n     \
    \   // System.out.println(\"Coffee is ready!\");\n    //Stage2\n        //System.out.println(\"\
    Write how many cups of coffee you will need:\");\n        // int cupCount = sc.nextInt();\n\
    \        // System.out.println(calculateIngredients(cupCount));\n    //Stage3\
    \    \n        // System.out.println(\"Write how many ml of water the coffee machine\
    \ has:\");\n        // int water = sc.nextInt();\n        // System.out.println(\"\
    Write how many ml of milk the coffee machine has:\");\n        // int milk = sc.nextInt();\n\
    \        // System.out.println(\"Write how many grams of coffee beans the coffee\
    \ machine has:\");\n        // int coffee = sc.nextInt();\n        // System.out.println(\"\
    Write how many cups of coffee you will need:\");\n        // int cups = sc.nextInt();\n\
    \        // int availableAmmount = howManyCups (milk, water, coffee);\n      \
    \  // if(availableAmmount > cups) {\n        //     System.out.println(\"Yes,\
    \ I can make that amount of coffee (and even \" + (availableAmmount - cups) +\n\
    \        //                        \" more than that)\");\n        // } else if\
    \ (availableAmmount == cups) {\n        //     System.out.println(\"Yes, I can\
    \ make that amount of coffee\");\n        // } else if (availableAmmount < cups)\
    \ {\n        //     System.out.println(\"No, I can make only \" + availableAmmount\
    \ + \" cup(s) of coffee\");\n        // }\n        //Stage 4\n        int water\
    \ = 400;\n        int milk = 540;\n        int coffee = 120;\n        int cups\
    \ = 9;\n        int money = 550;\n        System.out.println(printMachineState(water,\
    \ milk, coffee, cups, money));\n        System.out.println(\"Write action (buy,\
    \ fill, take):\");\n        String answer = sc.nextLine();\n        if (answer.equals(\"\
    buy\")) {\n            System.out.println(\"What do you want to buy? 1 - espresso,\
    \ 2 - latte, 3 - cappuccino:\");\n            int selection = sc.nextInt();\n\
    \            switch (selection) {\n                case 1:\n                 \
    \   water -= 250;\n                    coffee -= 16;\n                    money\
    \ += 4;\n                    cups -= 1;\n        System.out.println(printMachineState(water,\
    \ milk, coffee, cups, money));\n                    break;\n                case\
    \ 2:\n                    water -= 350;\n                    milk -= 75;\n   \
    \                 coffee -= 20;\n                    money += 7;\n           \
    \         cups -= 1;\n        System.out.println(printMachineState(water, milk,\
    \ coffee, cups, money));\n                    break;\n\n                case 3:\n\
    \                    water -= 200;\n                    milk -= 100;\n       \
    \             coffee -= 12;\n                    money += 6;\n               \
    \     cups -= 1;\n        System.out.println(printMachineState(water, milk, coffee,\
    \ cups, money));\n                    break;\n            }\n        } else if\
    \ (answer.equals(\"fill\")) {\n            System.out.println(\"Write how many\
    \ ml of water you want to add:\");\n            water += sc.nextInt();\n     \
    \       System.out.println(\"Write how many ml of milk you want to add:\");\n\
    \            milk += sc.nextInt();\n            System.out.println(\"Write how\
    \ many grams of coffee beans you want to add: \");\n            coffee += sc.nextInt();\n\
    \            System.out.println(\"Write how many disposable cups you want to add:\
    \ \");\n            cups += sc.nextInt();\n        System.out.println(printMachineState(water,\
    \ milk, coffee, cups, money));\n        } else if (answer.equals(\"take\")) {\n\
    \            System.out.println(\"I gave you $\" + money);\n            money\
    \ = 0;\n        System.out.println(printMachineState(water, milk, coffee, cups,\
    \ money));\n        }\n\n        \n        \n        \n\n    }\n\n    public static\
    \ String printMachineState(int water, int milk, int coffee, int cups, int money)\
    \ {\n        return \"The coffee machine has:\" + \"\\n\"\n            + water\
    \ + \" ml of water\" + \"\\n\"\n            + milk + \" ml of milk\" + \"\\n\"\
    \n            + coffee + \" g of coffee beans\" + \"\\n\"\n            + cups\
    \ + \" disposable cups\" + \"\\n\" + \"$\"\n            + money + \" of money\"\
    ;\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n    \n//Stage2\n    // public static int howManyCups\
    \ (int milk, int water, int coffee) {\n    //     int waters = water / 200;\n\
    \    //     int milks = milk / 50;\n    //     int coffees = coffee / 15;\n  \
    \  //     int min = waters;\n    //     if(milks < min) {\n    //         min\
    \ = milks;\n    //     } else if (coffees < min) {\n    //         min = coffees;\n\
    \    //     }\n    //     return min;\n    // }\n//Stage3\n    // public static\
    \ String calculateIngredients(int nOfCups) {\n    //     int water = nOfCups *\
    \ 200;\n    //     int milk = nOfCups * 50;\n    //     int coffee = nOfCups *\
    \ 15;\n    //     return \"For \" + nOfCups + \" cups of coffee you will need:\"\
    \ + \"\\n\"\n    //         + water + \" ml of water\" + \"\\n\" \n    //    \
    \     + milk + \" ml of milk\" + \"\\n\"\n    //         + coffee + \" g of coffee\
    \ beans\";\n    // }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 14 Mar 2023 15:35:12 UTC"
record: 4
